<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="miao.you.meng.config.dashboard.controller"/>

    <!--<import resource="applicationContext-service-config.xml"/>-->
    <bean id="client" class="miao.you.meng.config.spring.ZookeeperClientFactoryBean" >
        <property name="zookeeperCluster" value="${zookeeper.cluster}" />
        <property name="retryTimes" value="${retry.times}" />
        <property name="retryDelay" value="${retry.delay}" />
    </bean>

    <bean id="appService" class="miao.you.meng.config.service.impl.AppServiceImpl"/>
    <bean id="configService" class="miao.you.meng.config.service.impl.ConfigServiceImpl"/>
    <bean id="dsService" class="miao.you.meng.config.service.impl.DataSourceServiceImpl"/>
    <bean id="userService" class="miao.you.meng.config.service.impl.UserServiceImpl"/>
    <bean id="roleService" class="miao.you.meng.config.service.impl.RoleServiceImpl"/>
    <bean id="zookeeperService" class="miao.you.meng.config.service.impl.ZookeeperServiceImpl"/>


    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${dataSource.url}"/>
        <property name="username" value="${dataSource.username}"/>
        <property name="password" value="${dataSource.password}"/>
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="1"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="filters" value="stat"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--mybatis的配置组合-->
        <property name="configLocation" value="classpath:mybatis-configuration.xml"/>
        <!--找到mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="miao.you.meng.config.mapper"/>
    </bean>

    <!--对于mybatis的操作进行事务管理-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 启动事务配置 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--对于mybatis事务操作的特性进行添加-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--propagation 是否需要传播行为-->
            <!--rollback-for回滚-->
            <!--read-only只读-->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--就上面的事务配置组合，需要aop切面进行调用，在什么地方调用-->
    <aop:config>
        <aop:pointcut id="pointer1" expression="execution(* miao.you.meng.config.service.impl..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointer1"/>
    </aop:config>


</beans>